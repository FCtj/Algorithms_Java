public class LLStack {
	private ListNode headNode;

	public LLStack() {
		headNode = null;
	}

	void push(int data) {
		if (isEmpty())
			headNode = new ListNode(data);
		else if (headNode.getData() == 0)
			headNode.setData(data);
		else {
			ListNode pushNode = new ListNode(data);
			pushNode.setNext(headNode);
			headNode = pushNode;
		}
	}

	int pop() {
		if (isEmpty()) {
			System.out.println("Stack Underflow");
			return -1;
		} else {
			int data = headNode.getData();
			headNode = headNode.getNext();
			return data;
		}
	}

	void deleteStack() {
		headNode=null;
	}

	int top() {
		if(isEmpty()){
			System.out.println("Stack Underflow!");}
		else{
			return headNode.getData();
		}
		return -1;
	}

	int size() {
		if(isEmpty())
			return 0;
		else{
			return headNode.ListLength();
		}
	}
	boolean isEmpty(){
		if(headNode==null)return true;
		else return false;
	}
	void PrintStack() {
		headNode.PrintNode();
	}
}
